{"version":3,"sources":["Square.js","utils.js","Board.js","swipeDetect.js","serviceWorker.js","index.js"],"names":["Square","props","state","x","y","n","this","num","className","id","React","Component","DIR","window","$","Board","arr","Array","fill","map","_","i","array","length","j","Math","floor","random","temp","shuffleArray","newArr","push","splice","emptyCell","document","keydown","e","a","move","which","el","callback","swipedir","startX","startY","distX","distY","startTime","touchsurface","handleswipe","addEventListener","preventDefault","touchobj","changedTouches","pageX","pageY","Date","getTime","abs","swipeDetect","bind","direction","console","log","undefined","animate","setState","style","gridTemplateColumns","repeat","tab","key","css","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","process","URL","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5792cf2d.chunk.js","sourcesContent":["import React from 'react';\n\nclass Square extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            x: props.x,\n            y: props.y\n        }\n    }\n\n    render() {\n        const n = this.props.num;\n        return <div className=\"board-cell\" id={n}>{n}</div>;\n    }\n}\n\nexport default Square;","export const DIR = {\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n}","import React from 'react';\nimport Square from './Square';\nimport $ from 'jquery';\nimport { DIR } from './utils';\nimport { swipeDetect } from './swipeDetect';\n\nwindow.$ = $;\n\nfunction shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const n = this.props.n\n        var arr = new Array(n * n).fill(0).map((_, i) => i);\n        shuffleArray(arr);\n        const newArr = [];\n        while (arr.length) newArr.push(arr.splice(0, n));\n        arr = newArr;\n        var x, y;\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < n; j++) {\n                if (arr[i][j] === 0) {\n                    x = i;\n                    y = j;\n                }\n            }\n        }\n\n        this.state = {\n            n: n,\n            arr: arr,\n            emptyCell: {\n                x: x,\n                y: y\n            }\n        }\n\n        $(document).keydown(async (e) => {\n            await this.move(e.which);\n        });\n\n        swipeDetect(document, this.move.bind(this));\n    }\n\n    async move(direction) {\n        const emptyCell = this.state.emptyCell;\n        var arr = this.state.arr;\n        var { x, y } = emptyCell;\n        var id;\n        console.log(x, y);\n        try {\n            switch (direction) {\n                case DIR.UP:\n                    console.log(\"up\");\n                    id = arr[x + 1][y];\n                    if (id === undefined) return;\n                    $(`#${id}`)[0].animate([{\"top\": \"100%\"}, {\"top\": \"0%\"}], 2000);\n                    var temp = arr[x][y];\n                    arr[x][y] = arr[x + 1][y];\n                    arr[x + 1][y] = temp;\n                    x++;\n                    break;\n                case DIR.RIGHT:\n                    id = arr[x][y - 1];\n                    if (id === undefined) return;\n                    $(`#${id}`)[0].animate([{\"left\": \"-100%\"}, {\"left\": \"0%\"}], 2000);\n                    temp = arr[x][y];\n                    arr[x][y] = arr[x][y - 1];\n                    arr[x][y - 1] = temp;\n                    y--;\n                    break;\n                case DIR.DOWN:\n                    console.log(\"down\");\n                    id = arr[x - 1][y];\n                    if (id === undefined) return;\n                    $(`#${id}`)[0].animate([{\"top\": \"-100%\"}, {\"top\": \"0%\"}], 2000);\n                    temp = arr[x][y];\n                    arr[x][y] = arr[x - 1][y];\n                    arr[x - 1][y] = temp;\n                    x--;\n                    break;\n                case DIR.LEFT:\n                    console.log(\"left\");\n                    id = arr[x][y + 1];\n                    if (id === undefined) return;\n                    $(`#${id}`)[0].animate([{\"left\": `100%`}, {\"left\": \"0%\"}], 2000);\n                    temp = arr[x][y];\n                    arr[x][y] = arr[x][y + 1];\n                    arr[x][y + 1] = temp;\n                    y++;\n                    break;\n                default:\n                    break;\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        this.setState({\n            emptyCell: { x, y },\n            arr: arr\n        });\n    }\n\n    render() {\n        const n = this.props.n;\n        const style = { gridTemplateColumns: (\"1fr \".repeat(n)) };\n        var arr = this.state.arr;\n        var tab = [];\n        for (var i = 0; i < n; i++) {\n            for (var j = 0; j < n; j++) {\n                tab.push(<Square key={arr[i][j]} num={arr[i][j]} x={j} y={i} />);\n            }\n        }\n        $(\".board-cell\").css(\"left\", \"0%\");\n        $(\".board-cell\").css(\"top\", \"0%\");\n        $(\"#0\").css(\"background-color\", \"white\");\n        return <div className=\"board\" style={style}> {tab} </div>;\n    }\n}\nexport default Board;","import { DIR } from \"./utils\"\n\nexport const swipeDetect = (el, callback) => {\n    var touchsurface = el,\n        swipedir,\n        startX,\n        startY,\n        distX,\n        distY,\n        threshold = 15, //required min distance traveled to be considered swipe\n        restraint = 100, // maximum distance allowed at the same time in perpendicular direction\n        allowedTime = 3000, // maximum time allowed to travel that distance\n        elapsedTime,\n        startTime,\n        handleswipe = callback || function (swipedir) { };\n\n    touchsurface.addEventListener('touchstart', function (e) {\n        e.preventDefault();\n        var touchobj = e.changedTouches[0];\n        swipedir = 'none';\n        distX = 0;\n        distY = 0;\n        startX = touchobj.pageX;\n        startY = touchobj.pageY;\n        startTime = new Date().getTime(); // record time when finger first makes contact with surface\n        e.preventDefault();\n    }, false);\n\n    touchsurface.addEventListener('touchmove', function (e) {\n        e.preventDefault() // prevent scrolling when inside DIV\n    }, false);\n\n    touchsurface.addEventListener('touchend', function (e) {\n        e.preventDefault();\n        var touchobj = e.changedTouches[0]\n        distX = touchobj.pageX - startX // get horizontal dist traveled by finger while in contact with surface\n        distY = touchobj.pageY - startY // get vertical dist traveled by finger while in contact with surface\n        elapsedTime = new Date().getTime() - startTime // get time elapsed\n        if (elapsedTime <= allowedTime) { // first condition for awipe met\n            if (Math.abs(distX) >= threshold && Math.abs(distY) <= restraint) { // 2nd condition for horizontal swipe met\n                swipedir = (distX < 0) ? DIR.LEFT : DIR.RIGHT // if dist traveled is negative, it indicates left swipe\n            }\n            else if (Math.abs(distY) >= threshold && Math.abs(distX) <= restraint) { // 2nd condition for vertical swipe met\n                swipedir = (distY < 0) ? DIR.UP : DIR.DOWN // if dist traveled is negative, it indicates up swipe\n            }\n        }\n        handleswipe(swipedir)\n        e.preventDefault()\n    }, false);\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  console.log(process.env);\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      \n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\nimport './index.css';\nimport Board from './Board';\nimport * as serviceWorker from './serviceWorker';\n\nconst n = 4;\n\nReactDOM.render(\n    <Board n={n}/>,\n    document.getElementById('root')\n);\n\n$(\"#0\").css({\"visibility\": \"hidden\", \"z-index\": \"-1\"});\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}